{"sections":[],"abstract":[{"text":"BigInt supports the standard integer data type’s SignedInteger, BinaryInteger, Codable, and Numeric protocols.","type":"text"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"},"metadata":{"modules":[{"name":"BigInt"}],"title":"Protocols and Additions","roleHeading":"Article","role":"article"},"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"BigInt (with protocols) now includes support for StaticBigInt number initialization"},{"text":" ","type":"text"},{"type":"text","text":"with macOS 13.3+, iOS 16.4+, tvOS 16.4+, watchOS 9.4+, macCatalyst 13.0+."},{"text":" ","type":"text"},{"type":"text","text":"Note: These extensions required renaming "},{"type":"codeVoice","code":"magnitude"},{"text":" to ","type":"text"},{"code":"_magnitude","type":"codeVoice"},{"text":" to avoid conflict with the","type":"text"},{"text":" ","type":"text"},{"text":"Numeric protocol variable also called ","type":"text"},{"type":"codeVoice","code":"magnitude"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Why support protocols? By supporting them you gain the ability to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"formulate generic algorithms and make use of algorithms from others"},{"type":"text","text":" "},{"text":"that use the protocol type(s) you support. For example, ","type":"text"},{"code":"Strideable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"compliance is free (with "},{"type":"codeVoice","code":"BinaryInteger"},{"text":") and lets you do things like","type":"text"}]},{"type":"codeListing","code":["for i in BInt(1)...10 {","   print(i.words)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The BigInt struct also","type":"text"},{"text":" ","type":"text"},{"text":"includes ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" compliance conformity (for free). Codable"},{"text":" ","type":"text"},{"text":"compliance allows BInts to be distributed\/received or stored\/read as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"industry-standard JSONs."}]},{"type":"paragraph","inlineContent":[{"text":"Protocols mean you can support generic arguments:","type":"text"},{"type":"text","text":" "},{"text":"(e.g., ","type":"text"},{"type":"codeVoice","code":"func * <T:BinaryInteger>(_ lhs: Self, rhs: T) -> Self"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which works with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" ","type":"text"},{"code":"BinaryIntegers","type":"codeVoice"},{"text":", including BigInt’s instead of","type":"text"},{"type":"text","text":" "},{"text":"just Ints or a single integer type.","type":"text"}]},{"inlineContent":[{"text":"Additionally, with support for StaticBigInt, initialization can now","type":"text"},{"text":" ","type":"text"},{"text":"use unlimited precision instead of requiring quoted numbers:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let huge = BInt(12_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789)","let hugeHex = BInt(0x1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0)","let hugeOctal = BInt(0o123_456_701_123_456_701_123_456_701_123_456_701_123_456_701_123_456_701)","let hugeBinary = BInt(0b10010101_01010101_01010101_01010010_10101000_01010111_11100101_01010101_01001010_10101010)","print(huge, \"0x\"+hugeHex.asString(radix: 16, uppercase: true), \"0o\"+hugeOctal.asString(radix: 8), ","        \"0b\"+hugeBinary.asString(radix: 2))"]},{"inlineContent":[{"type":"text","text":"produces:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["12345678901234567890123456789012345678901234567890123456789 ","0x123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0 ","0o123456701123456701123456701123456701123456701123456701 ","0b10010101010101010101010101010010101010000101011111100101010101010100101010101010"]},{"inlineContent":[{"type":"text","text":"Finally, protocol support allows simplified extensions to the BigDecimal"},{"text":" ","type":"text"},{"type":"text","text":"package available "},{"identifier":"https:\/\/github.com\/mgriebling\/BigDecimal.git","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It contains a complete arbitrary-precision Decimal number implementation","type":"text"},{"text":" ","type":"text"},{"text":"with support for standard 32-, 64-, and 128-bit decimal number formats.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/protocols"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"],"anchor":"Articles","generated":true}],"references":{"doc://bigint.BigInt/documentation/BigInt/Performance":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","kind":"article","title":"Performance","role":"article","type":"topic","url":"\/documentation\/bigint\/performance","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}]},"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","type":"topic","url":"\/documentation\/bigint","role":"collection","kind":"symbol","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","abstract":[{"type":"text","text":"Signed integers and fractions of unbounded size"}]},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","title":"About BInt","type":"topic","abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"url":"\/documentation\/bigint\/aboutbint","role":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"kind":"article","title":"About BFraction","type":"topic","url":"\/documentation\/bigint\/aboutbfraction","role":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"url":"\/documentation\/bigint\/aboutcrt","title":"About CRT","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","type":"topic","kind":"article","role":"article"},"doc://bigint.BigInt/documentation/BigInt/Algorithms":{"kind":"article","abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"role":"article","url":"\/documentation\/bigint\/algorithms","type":"topic","title":"Algorithms","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"doc://bigint.BigInt/documentation/BigInt/References":{"kind":"article","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"role":"article","url":"\/documentation\/bigint\/references","type":"topic","title":"References","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References"},"https://github.com/mgriebling/BigDecimal.git":{"identifier":"https:\/\/github.com\/mgriebling\/BigDecimal.git","titleInlineContent":[{"text":"here","type":"text"}],"type":"link","url":"https:\/\/github.com\/mgriebling\/BigDecimal.git","title":"here"}}}