{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"anchor":"Articles","title":"Articles","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"","level":2,"text":"","type":"heading"},{"level":3,"anchor":"Multiplication","type":"heading","text":"Multiplication"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"ToomCook-3 algorithm for numbers with more than 12.800 bits"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Karatsuba algorithm for numbers with more than 6.400 bits","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Basecase - Knuth algorithm M"}],"type":"paragraph"}]}]},{"text":"Division and Remainder","level":3,"type":"heading","anchor":"Division-and-Remainder"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Basecase - Knuth algorithm D"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Exact Division - Jebelean’s exact division algorithm"}],"type":"paragraph"}]}]},{"type":"heading","text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase"}],"type":"paragraph"}]}]},{"text":"Extended Greatest Common Divisor","type":"heading","anchor":"Extended-Greatest-Common-Divisor","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers","type":"text"}]}]}],"type":"unorderedList"},{"text":"Modular Exponentiation","type":"heading","level":3,"anchor":"Modular-Exponentiation"},{"inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction algorithm 14.42","type":"text"}],"type":"paragraph"},{"anchor":"Inverse-Modulus","level":3,"text":"Inverse Modulus","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"else it is computed via the extended GCD algorithm"}]},{"anchor":"Square-Root","level":3,"text":"Square Root","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase","type":"text"}]},{"anchor":"Square-Root-Modulo-a-Prime-Number","text":"Square Root Modulo a Prime Number","type":"heading","level":3},{"inlineContent":[{"text":"Algorithm 2.3.8 from [CRANDALL]","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Random Numbers","anchor":"Random-Numbers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Random "},{"code":"BInt","type":"codeVoice"},{"type":"text","text":" numbers are generated using the cryptographically secure function "},{"type":"codeVoice","code":"SecRandomCopyBytes"}]},{"type":"heading","level":3,"text":"Prime Number Test","anchor":"Prime-Number-Test"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Miller-Rabin test"}]},{"level":3,"text":"Prime Number Generation","anchor":"Prime-Number-Generation","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}]},{"level":3,"anchor":"Factorial","type":"heading","text":"Factorial"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SplitRecursive","type":"codeVoice"},{"text":" algorithm from Peter Luschny: ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.luschny.de","type":"reference"}]},{"level":3,"anchor":"Fibonacci","text":"Fibonacci","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"fastDoubling","type":"codeVoice"},{"type":"text","text":" algorithm from Project Nayuki: "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.nayuki.io"}]},{"level":3,"text":"Jacobi and Kronecker symbols","anchor":"Jacobi-and-Kronecker-symbols","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm 2.3.5 from [CRANDALL]"}]},{"anchor":"Bernoulli-Numbers","text":"Bernoulli Numbers","level":3,"type":"heading"},{"inlineContent":[{"text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but no fraction arithmetic"}],"type":"paragraph"},{"text":"Chinese Remainder Theorem","type":"heading","level":3,"anchor":"Chinese-Remainder-Theorem"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Garner algorithm 2.1.7 from [CRANDALL]"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"metadata":{"role":"article","roleHeading":"Article","title":"Algorithms","modules":[{"name":"BigInt"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/algorithms"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"kind":"article","references":{"doc://bigint.BigInt/documentation/BigInt/Protocols":{"kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","title":"Protocols and Additions","type":"topic","abstract":[{"type":"text","text":"BigInt supports the standard integer data type’s SignedInteger, BinaryInteger, Codable, and Numeric protocols."}],"url":"\/documentation\/bigint\/protocols","role":"article"},"doc://bigint.BigInt/documentation/BigInt/References":{"kind":"article","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"role":"article","url":"\/documentation\/bigint\/references","type":"topic","title":"References","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References"},"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","type":"topic","url":"\/documentation\/bigint","role":"collection","kind":"symbol","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","abstract":[{"type":"text","text":"Signed integers and fractions of unbounded size"}]},"https://www.nayuki.io":{"title":"https:\/\/www.nayuki.io","titleInlineContent":[{"text":"https:\/\/www.nayuki.io","type":"text"}],"url":"https:\/\/www.nayuki.io","identifier":"https:\/\/www.nayuki.io","type":"link"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"url":"\/documentation\/bigint\/aboutcrt","title":"About CRT","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","type":"topic","kind":"article","role":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","title":"About BInt","type":"topic","abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"url":"\/documentation\/bigint\/aboutbint","role":"article"},"doc://bigint.BigInt/documentation/BigInt/Performance":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","kind":"article","title":"Performance","role":"article","type":"topic","url":"\/documentation\/bigint\/performance","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}]},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"kind":"article","title":"About BFraction","type":"topic","url":"\/documentation\/bigint\/aboutbfraction","role":"article"},"https://www.luschny.de":{"type":"link","titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"url":"https:\/\/www.luschny.de","identifier":"https:\/\/www.luschny.de","title":"https:\/\/www.luschny.de"}}}